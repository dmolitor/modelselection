[{"path":"http://www.dmolitor.com/modelselection/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 modelselection authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://www.dmolitor.com/modelselection/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"http://www.dmolitor.com/modelselection/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). modelselection: Package (One Line, Title Case). R package version 0.0.0.9000, http://www.dmolitor.com/modelselection/.","code":"@Manual{,   title = {modelselection: What the Package Does (One Line, Title Case)},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.0.0.9000},   url = {http://www.dmolitor.com/modelselection/}, }"},{"path":"http://www.dmolitor.com/modelselection/index.html","id":"modelselection","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal modelselection provide common model selection tuning utilities intuitive manner. Specifically, want something lightweight (mlr3) doesn’t force adopt whole new modeling paradigm (tidymodels). Also, want provided functionality type agnostic able work data frames, standard dense matrices, Matrix sparse matrices. Finally, want easily distributable (’s built top future.apply package) want full control 😉.","code":""},{"path":"http://www.dmolitor.com/modelselection/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version modelselection :","code":"# install.packages(\"devtools\") devtools::install_github(\"dmolitor/modelselection\")"},{"path":"http://www.dmolitor.com/modelselection/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"What the Package Does (One Line, Title Case)","text":"simple examples use built-iris data-set illustrate basic functionality modelselection.","code":""},{"path":"http://www.dmolitor.com/modelselection/index.html","id":"cross-validation","dir":"","previous_headings":"Usage","what":"Cross Validation","title":"What the Package Does (One Line, Title Case)","text":"First ’ll train binary classification Decision Tree model predict whether flowers iris Species virginica ’ll specify 3-fold Cross-Validation scheme stratification Species estimate model’s true error rate. First, let’s split data train test set. Now, let’s specify fit 3-fold cross-validation scheme calculate F Measure, Accuracy, ROC AUC hold-set evaluation metrics. Now, let’s check evaluation metrics averaged across folds.","code":"library(future) library(modelselection) library(rpart) library(rsample) library(yardstick) #> For binary classification, the first factor level is assumed to be the event. #> Use the argument `event_level = \"second\"` to alter this as needed.  iris_new <- iris[sample(1:nrow(iris), nrow(iris)), ] iris_new$Species <- factor(iris_new$Species == \"virginica\") iris_train <- iris_new[1:100, ] iris_test <- iris_new[101:150, ] # Specify Cross Validation schema iris_cv <- CV$new(   learner = rpart,   learner_args = list(method = \"class\"),   splitter = vfold_cv,    splitter_args = list(v = 3, strata = \"Species\"),   scorer = list(     \"f_meas\" = f_meas_vec,     \"accuracy\" = accuracy_vec,     \"auc\" = roc_auc_vec   ),    prediction_args = list(     \"f_meas\" = list(type = \"class\"),     \"accuracy\" = list(type = \"class\"),      \"auc\" = list(type = \"prob\")   ),   convert_predictions = list(     NULL,     NULL,     function(.x) .x[, \"FALSE\"]   ) )  # Fit Cross Validated model iris_cv_fitted <- iris_cv$fit(formula = Species ~ ., data = iris_new) cat(   \"F-Measure:\", paste0(round(100 * iris_cv_fitted$mean_metrics$f_meas, 2), \"%\"),   \"\\n Accuracy:\", paste0(round(100 * iris_cv_fitted$mean_metrics$accuracy, 2), \"%\"),   \"\\n      AUC:\", paste0(round(iris_cv_fitted$mean_metrics$auc, 4)) ) #> F-Measure: 94.44%  #>  Accuracy: 92.66%  #>       AUC: 0.9204"},{"path":"http://www.dmolitor.com/modelselection/index.html","id":"grid-search","dir":"","previous_headings":"Usage","what":"Grid Search","title":"What the Package Does (One Line, Title Case)","text":"Another common model-tuning method grid search. ’ll use tune minsplit, minbucket, maxdepth parameters decision tree. choose optimal hyper-parameters maximize ROC AUC validation set. Let’s check details optimal decision tree model.","code":"# Specify Grid Search schema iris_grid <- GridSearch$new(   learner = rpart,   learner_args = list(method = \"class\"),   tune_params = list(     minsplit = seq(10, 30, by = 5),     minbucket = seq(1, 15, by = 1),     maxdepth = seq(20, 30, by = 2)   ),   evaluation_data = list(x = iris_test, y = iris_test$Species),   scorer = list(     accuracy = yardstick::accuracy_vec,     auc = yardstick::roc_auc_vec   ),   optimize_score = \"max\",   prediction_args = list(     accuracy = list(type = \"class\"),     auc = list(type = \"prob\")   ),   convert_predictions = list(     accuracy = NULL,     auc = function(i) i[, \"FALSE\"]   ) )  # Fit models across grid iris_grid_fitted <- iris_grid$fit(   formula = Species ~ .,   data = iris_train,   progress = TRUE ) cat(   \"Optimal Hyper-parameters:\\n  -\",   paste0(     paste0(names(iris_grid_fitted$best_params), \": \", iris_grid_fitted$best_params),     collapse = \"\\n  - \"   ),   \"\\nOptimal ROC AUC:\",    round(iris_grid_fitted$best_metric, 4) ) #> Optimal Hyper-parameters: #>   - minsplit: 10 #>   - minbucket: 5 #>   - maxdepth: 20  #> Optimal ROC AUC: 0.9835"},{"path":"http://www.dmolitor.com/modelselection/index.html","id":"parallelization","dir":"","previous_headings":"Usage","what":"Parallelization","title":"What the Package Does (One Line, Title Case)","text":"noted , modelselection built top future.apply package can utilize parallelization method supported future package fitting cross-validated models tuning models grid search. code evaluates cross-validated binary classification model using local multi-core parallelization. voila!","code":"# Initialize multi-core parallel strategy plan(multisession)  # Fit Cross Validated model iris_cv_fitted <- iris_cv$fit(formula = Species ~ ., data = iris_train)"},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictive Models with Cross Validation — CV","title":"Predictive Models with Cross Validation — CV","text":"CV allows user specify cross validation scheme complete flexibility model, data splitting function, performance metrics, among essential parameters.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Predictive Models with Cross Validation — CV","text":"learner Predictive modeling function. scorer List performance metric functions. splitter Function splits data cross validation folds.","code":""},{"path":[]},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Predictive Models with Cross Validation — CV","text":"CV$fit() CV$new() CV$clone()","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Predictive Models with Cross Validation — CV","text":"fit performs cross validation user-specified parameters.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive Models with Cross Validation — CV","text":"","code":"CV$fit(formula = NULL, data = NULL, x = NULL, y = NULL, progress = FALSE)"},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive Models with Cross Validation — CV","text":"formula object class formula: symbolic description model fitted. data optional data frame, object containing variables model. data provided, formula handled depends $learner. x Predictor data (independent variables), alternative interface data formula. y Response vector (dependent variable), alternative interface data formula. progress Logical; indicating whether print progress across cross validation folds.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictive Models with Cross Validation — CV","text":"fit follows standard R modeling convention surfacing formula modeling interface well alternate matrix option. user use whichever interface supported specified $learner function.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Predictive Models with Cross Validation — CV","text":"object class FittedCV.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictive Models with Cross Validation — CV","text":"","code":"if (require(rpart) && require(rsample) && require(yardstick)) {    iris_new <- iris[sample(1:nrow(iris), nrow(iris)), ]   iris_new$Species <- factor(iris_new$Species == \"virginica\")    ### Basic Example    iris_cv <- CV$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     splitter = rsample::vfold_cv,     splitter_args = list(v = 3),     scorer = list(       \"accuracy\" = yardstick::accuracy_vec     ),     prediction_args = list(type = \"class\")   )   iris_cv_fitted <- iris_cv$fit(formula = Species ~ ., data = iris_new)    ### Example with multiple metric functions    iris_cv <- CV$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     splitter = rsample::vfold_cv,     splitter_args = list(v = 3),     scorer = list(       \"f_meas\" = yardstick::f_meas_vec,       \"accuracy\" = yardstick::accuracy_vec,       \"roc_auc\" = yardstick::roc_auc_vec,       \"pr_auc\" = yardstick::pr_auc_vec     ),     prediction_args = list(       \"f_meas\" = list(type = \"class\"),       \"accuracy\" = list(type = \"class\"),       \"roc_auc\" = list(type = \"prob\"),       \"pr_auc\" = list(type = \"prob\")     ),     convert_predictions = list(       NULL,       NULL,       function(i) i[, \"FALSE\"],       function(i) i[, \"FALSE\"]     )   )   iris_cv_fitted <- iris_cv$fit(formula = Species ~ ., data = iris_new) }"},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Predictive Models with Cross Validation — CV","text":"Create new CV object.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive Models with Cross Validation — CV","text":"","code":"CV$new(   learner = NULL,   splitter = NULL,   scorer = NULL,   learner_args = NULL,   splitter_args = NULL,   scorer_args = NULL,   prediction_args = NULL,   convert_predictions = NULL )"},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive Models with Cross Validation — CV","text":"learner Function estimates predictive model. essential function support either formula interface formula data arguments, alternate matrix interface x y arguments. splitter function computes cross validation folds input data set pre-computed list cross validation fold indices. splitter function, must data argument input data, must return list cross validation fold indices. splitter list integers, number cross validation folds length(splitter) element contains indices data observations included fold. scorer named list metric functions evaluate model performance cross validation fold. provided metric function must truth estimate arguments, true outcome values predicted outcome values respectively, must return single numeric metric value. learner_args named list additional arguments pass learner. splitter_args named list additional arguments pass splitter. scorer_args named list additional arguments pass scorer. scorer_args must either length 1 length(scorer) case different arguments passed scoring function. prediction_args named list additional arguments pass predict. prediction_args must either length 1 length(scorer) case different arguments passed scoring function. convert_predictions list functions convert predicted values prior evaluated metric functions supplied scorer. list either length 1, case function applied predicted values, length(scorer) case function convert_predictions correspond function scorer.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Predictive Models with Cross Validation — CV","text":"object class CV.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Predictive Models with Cross Validation — CV","text":"objects class cloneable method.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive Models with Cross Validation — CV","text":"","code":"CV$clone(deep = FALSE)"},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive Models with Cross Validation — CV","text":"deep Whether make deep clone.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/CV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictive Models with Cross Validation — CV","text":"","code":"## ------------------------------------------------ ## Method `CV$fit` ## ------------------------------------------------  if (require(rpart) && require(rsample) && require(yardstick)) {    iris_new <- iris[sample(1:nrow(iris), nrow(iris)), ]   iris_new$Species <- factor(iris_new$Species == \"virginica\")    ### Basic Example    iris_cv <- CV$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     splitter = rsample::vfold_cv,     splitter_args = list(v = 3),     scorer = list(       \"accuracy\" = yardstick::accuracy_vec     ),     prediction_args = list(type = \"class\")   )   iris_cv_fitted <- iris_cv$fit(formula = Species ~ ., data = iris_new)    ### Example with multiple metric functions    iris_cv <- CV$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     splitter = rsample::vfold_cv,     splitter_args = list(v = 3),     scorer = list(       \"f_meas\" = yardstick::f_meas_vec,       \"accuracy\" = yardstick::accuracy_vec,       \"roc_auc\" = yardstick::roc_auc_vec,       \"pr_auc\" = yardstick::pr_auc_vec     ),     prediction_args = list(       \"f_meas\" = list(type = \"class\"),       \"accuracy\" = list(type = \"class\"),       \"roc_auc\" = list(type = \"prob\"),       \"pr_auc\" = list(type = \"prob\")     ),     convert_predictions = list(       NULL,       NULL,       function(i) i[, \"FALSE\"],       function(i) i[, \"FALSE\"]     )   )   iris_cv_fitted <- iris_cv$fit(formula = Species ~ ., data = iris_new) } #> Loading required package: rpart #> Loading required package: rsample #> Loading required package: yardstick #> For binary classification, the first factor level is assumed to be the event. #> Use the argument `event_level = \"second\"` to alter this as needed."},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted, Cross-Validated Predictive Models — FittedCV","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"FittedCV fitted, cross-validated predictive model object returned CV$fit() contains relevant model components, cross-validation metrics, validation set predicted values, etc.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"folds list length $nfolds element contains indices observations contained fold. model Predictive model fitted full data set. mean_metrics Numeric list; Cross-validation performance metrics averaged across folds. metrics Numeric list; Cross-validation performance metrics fold. nfolds integer specifying number cross-validation folds. predictions list containing predicted hold-values every fold.","code":""},{"path":[]},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"FittedCV$new() FittedCV$clone()","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"Create new FittedCV object.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"","code":"FittedCV$new(folds, model, metrics, nfolds, predictions)"},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"folds list length $nfolds element contains indices observations contained fold. model Predictive model fitted full data set. metrics Numeric list; Cross-validation performance metrics fold. nfolds integer specifying number cross-validation folds. predictions list containing predicted hold-values every fold.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"object class FittedCV.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"objects class cloneable method.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"","code":"FittedCV$clone(deep = FALSE)"},{"path":"http://www.dmolitor.com/modelselection/reference/FittedCV.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted, Cross-Validated Predictive Models — FittedCV","text":"deep Whether make deep clone.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"FittedGridSearch object containing fitted predictive models across tuning grid hyper-parameters returned GridSearch$fit() well relevant model information best performing model, best hyper-parameters, etc.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"best_idx integer specifying index $models contains best-performing model. best_metric performance metric best model validation data. best_model best performing predictive model. best_params named list hyper-parameters result optimal predictive model. tune_params Data.frame full hyper-parameter grid. models List predictive models every value $tune_params. metrics Numeric list; Cross-validation performance metrics fold. predictions list containing predicted hold-values every fold.","code":""},{"path":[]},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"FittedGridSearch$new() FittedGridSearch$clone()","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"Create new FittedGridSearch object.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"","code":"FittedGridSearch$new(tune_params, models, metrics, predictions, optimize_score)"},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"tune_params Data.frame full hyper-parameter grid. models List predictive models every value $tune_params. metrics List performance metrics validation data every model $models. predictions list containing predicted values validation data every model $models. optimize_score Either \"max\" \"min\" indicating whether specified performance metric maximized minimized find optimal predictive model.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"object class FittedGridSearch.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"objects class cloneable method.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"","code":"FittedGridSearch$clone(deep = FALSE)"},{"path":"http://www.dmolitor.com/modelselection/reference/FittedGridSearch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitted Models across a Tuning Grid of Hyper-parameters — FittedGridSearch","text":"deep Whether make deep clone.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"GridSearch allows user specify Grid Search schema tuning predictive model hyper-parameters complete flexibility predictive model performance metrics.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"learner Predictive modeling function. scorer List performance metric functions. tune_params Data.frame full hyper-parameter grid created $tune_params","code":""},{"path":[]},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"GridSearch$fit() GridSearch$new() GridSearch$clone()","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"fit tunes user-specified model hyper-parameters via Grid Search.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"","code":"GridSearch$fit(   formula = NULL,   data = NULL,   x = NULL,   y = NULL,   progress = FALSE )"},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"formula object class formula: symbolic description model fitted. data optional data frame, object containing variables model. data provided, formula handled depends $learner. x Predictor data (independent variables), alternative interface data formula. y Response vector (dependent variable), alternative interface data formula. progress Logical; indicating whether print progress across cross validation folds.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"fit follows standard R modeling convention surfacing formula modeling interface well alternate matrix option. user use whichever interface supported specified $learner function.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"object class FittedGridSearch.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"","code":"if (require(rpart) && require(rsample) && require(yardstick)) {    iris_new <- iris[sample(1:nrow(iris), nrow(iris)), ]   iris_new$Species <- factor(iris_new$Species == \"virginica\")   iris_train <- iris_new[1:100, ]   iris_validate <- iris_new[101:150, ]    ### Basic Example    iris_grid <- GridSearch$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     tune_params = list(       minsplit = seq(10, 30, by = 5),       maxdepth = seq(20, 30, by = 2)     ),     evaluation_data = list(x = iris_validate, y = iris_validate$Species),     scorer = list(accuracy = yardstick::accuracy_vec),     optimize_score = \"max\",     prediction_args = list(accuracy = list(type = \"class\"))   )   iris_grid_fitted <- iris_grid$fit(     formula = Species ~ .,     data = iris_train   )    ### Example with multiple metric functions    iris_grid <- GridSearch$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     tune_params = list(       minsplit = seq(10, 30, by = 5),       maxdepth = seq(20, 30, by = 2)     ),     evaluation_data = list(x = iris_validate, y = iris_validate$Species),     scorer = list(       accuracy = yardstick::accuracy_vec,       auc = yardstick::roc_auc_vec     ),     optimize_score = \"max\",     prediction_args = list(       accuracy = list(type = \"class\"),       auc = list(type = \"prob\")     ),     convert_predictions = list(       accuracy = NULL,       auc = function(i) i[, \"FALSE\"]     )   )   iris_grid_fitted <- iris_grid$fit(     formula = Species ~ .,     data = iris_train,   ) }"},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"Create new GridSearch object.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"","code":"GridSearch$new(   learner = NULL,   tune_params = NULL,   evaluation_data = NULL,   scorer = NULL,   optimize_score = c(\"min\", \"max\"),   learner_args = NULL,   scorer_args = NULL,   prediction_args = NULL,   convert_predictions = NULL )"},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"learner Function estimates predictive model. essential function support either formula interface formula data arguments, alternate matrix interface x y arguments. tune_params named list specifying arguments $learner tune. evaluation_data two-element list containing following elements: x, validation data generate predicted values ; y, validation response values evaluate predictive performance. scorer named list metric functions evaluate model performance evaluation_data. provided metric function must truth estimate arguments, true outcome values predicted outcome values respectively, must return single numeric metric value. last metric function one used identify optimal model Grid Search. optimize_score One \"max\" \"min\"; Whether maximize minimize metric defined scorer find optimal Grid Search parameters. learner_args named list additional arguments pass learner. scorer_args named list additional arguments pass scorer. scorer_args must either length 1 length(scorer) case different arguments passed scoring function. prediction_args named list additional arguments pass predict. prediction_args must either length 1 length(scorer) case different arguments passed scoring function. convert_predictions list functions convert predicted values prior evaluated metric functions supplied scorer. list either length 1, case function applied predicted values, length(scorer) case function convert_predictions correspond function scorer.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"object class GridSearch.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"objects class cloneable method.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"","code":"GridSearch$clone(deep = FALSE)"},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"deep Whether make deep clone.","code":""},{"path":"http://www.dmolitor.com/modelselection/reference/GridSearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tune Predictive Model Hyper-parameters with Grid Search — GridSearch","text":"","code":"## ------------------------------------------------ ## Method `GridSearch$fit` ## ------------------------------------------------  if (require(rpart) && require(rsample) && require(yardstick)) {    iris_new <- iris[sample(1:nrow(iris), nrow(iris)), ]   iris_new$Species <- factor(iris_new$Species == \"virginica\")   iris_train <- iris_new[1:100, ]   iris_validate <- iris_new[101:150, ]    ### Basic Example    iris_grid <- GridSearch$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     tune_params = list(       minsplit = seq(10, 30, by = 5),       maxdepth = seq(20, 30, by = 2)     ),     evaluation_data = list(x = iris_validate, y = iris_validate$Species),     scorer = list(accuracy = yardstick::accuracy_vec),     optimize_score = \"max\",     prediction_args = list(accuracy = list(type = \"class\"))   )   iris_grid_fitted <- iris_grid$fit(     formula = Species ~ .,     data = iris_train   )    ### Example with multiple metric functions    iris_grid <- GridSearch$new(     learner = rpart::rpart,     learner_args = list(method = \"class\"),     tune_params = list(       minsplit = seq(10, 30, by = 5),       maxdepth = seq(20, 30, by = 2)     ),     evaluation_data = list(x = iris_validate, y = iris_validate$Species),     scorer = list(       accuracy = yardstick::accuracy_vec,       auc = yardstick::roc_auc_vec     ),     optimize_score = \"max\",     prediction_args = list(       accuracy = list(type = \"class\"),       auc = list(type = \"prob\")     ),     convert_predictions = list(       accuracy = NULL,       auc = function(i) i[, \"FALSE\"]     )   )   iris_grid_fitted <- iris_grid$fit(     formula = Species ~ .,     data = iris_train,   ) }"},{"path":"http://www.dmolitor.com/modelselection/reference/modelselection-package.html","id":null,"dir":"Reference","previous_headings":"","what":"modelselection: What the Package Does (One Line, Title Case) — modelselection-package","title":"modelselection: What the Package Does (One Line, Title Case) — modelselection-package","text":"Provides model selection tuning utilities.","code":""},{"path":[]},{"path":"http://www.dmolitor.com/modelselection/reference/modelselection-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"modelselection: What the Package Does (One Line, Title Case) — modelselection-package","text":"Maintainer: Daniel Molitor molitdj97@gmail.com","code":""}]
